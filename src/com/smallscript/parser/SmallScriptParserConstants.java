/* Generated By:JJTree&JavaCC: Do not edit this line. SmallScriptParserConstants.java */
package com.smallscript.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SmallScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int OCBR = 9;
  /** RegularExpression Id. */
  int CCBR = 10;
  /** RegularExpression Id. */
  int END = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int LOOP = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int GT = 15;
  /** RegularExpression Id. */
  int LE = 16;
  /** RegularExpression Id. */
  int GE = 17;
  /** RegularExpression Id. */
  int DEF = 18;
  /** RegularExpression Id. */
  int COLON = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int BREAK = 21;
  /** RegularExpression Id. */
  int IMPORT = 22;
  /** RegularExpression Id. */
  int DOT = 23;
  /** RegularExpression Id. */
  int VOID = 24;
  /** RegularExpression Id. */
  int INT = 25;
  /** RegularExpression Id. */
  int STRING = 26;
  /** RegularExpression Id. */
  int CHAR = 27;
  /** RegularExpression Id. */
  int ARRAY_TYPE = 28;
  /** RegularExpression Id. */
  int DIVIDE = 29;
  /** RegularExpression Id. */
  int MULTIPLY = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int MOD = 33;
  /** RegularExpression Id. */
  int DBL_EQUAL = 34;
  /** RegularExpression Id. */
  int NUMBER = 35;
  /** RegularExpression Id. */
  int PRINT = 36;
  /** RegularExpression Id. */
  int EQUAL = 37;
  /** RegularExpression Id. */
  int VAR = 38;
  /** RegularExpression Id. */
  int VAL = 39;
  /** RegularExpression Id. */
  int OPEN_PARAN = 40;
  /** RegularExpression Id. */
  int CLOSE_PARAN = 41;
  /** RegularExpression Id. */
  int COMMA = 42;
  /** RegularExpression Id. */
  int OPEN_SQ_BRAC = 43;
  /** RegularExpression Id. */
  int CLOSE_SQ_BRAC = 44;
  /** RegularExpression Id. */
  int ARROW = 45;
  /** RegularExpression Id. */
  int EQUAL_ARROW = 46;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 47;
  /** RegularExpression Id. */
  int IDENTIFIER = 48;
  /** RegularExpression Id. */
  int STRING_LITERAL = 49;
  /** RegularExpression Id. */
  int CHARS = 50;
  /** RegularExpression Id. */
  int LETTER = 51;
  /** RegularExpression Id. */
  int INTEGER = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"else\"",
    "\"{\"",
    "\"}\"",
    "\"end\"",
    "\"while\"",
    "\"loop\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"def\"",
    "\":\"",
    "\"return\"",
    "\"break\"",
    "\"import\"",
    "\".\"",
    "\"Void\"",
    "\"Int\"",
    "\"String\"",
    "\"Char\"",
    "<ARRAY_TYPE>",
    "\"/\"",
    "\"*\"",
    "\"+\"",
    "\"-\"",
    "\"%\"",
    "\"==\"",
    "<NUMBER>",
    "\"print\"",
    "\"=\"",
    "\"var\"",
    "\"val\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"[\"",
    "\"]\"",
    "\"->\"",
    "\"=>\"",
    "<CHAR_LITERAL>",
    "<IDENTIFIER>",
    "<STRING_LITERAL>",
    "<CHARS>",
    "<LETTER>",
    "<INTEGER>",
  };

}
